{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files\n</code></pre>  \\begin{aligned} 5 &amp;=(101)_2\\\\ 6 &amp;=(110)_2\\\\ 5\\operatorname\\&amp;6 &amp;=(100)_2 =\\ 4\\\\ 5\\operatorname|6 &amp;=(111)_2 =\\ 7\\\\ 5\\oplus6 &amp;=(011)_2 =\\ 3\\\\ \\end{aligned}"},{"location":"ctc/","title":"Changing the colors","text":"<p>As any proper Material Design implementation, Material for MkDocs supports Google's original color palette, which can be easily configured through <code>mkdocs.yml</code>. Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables.</p>"},{"location":"ctc/#configuration","title":"Configuration","text":""},{"location":"ctc/#color-palette","title":"Color palette","text":""},{"location":"ctc/#color-scheme","title":"Color scheme","text":"<p>Material for MkDocs supports two color schemes: a light mode, which is just called <code>default</code>, and a dark mode, which is called <code>slate</code>. The color scheme can be set via <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  palette:\n    scheme: default\n</code></pre> <p>Click on a tile to change the color scheme:</p> <code>default</code> <code>slate</code>"},{"location":"ctc/#primary-color","title":"Primary color","text":"<p>The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in <code>mkdocs.yml</code> to a valid color name:</p> <pre><code>theme:\n  palette:\n    primary: indigo\n</code></pre> <p>Click on a tile to change the primary color:</p> <code>red</code> <code>pink</code> <code>purple</code> <code>deep purple</code> <code>indigo</code> <code>blue</code> <code>light blue</code> <code>cyan</code> <code>teal</code> <code>green</code> <code>light green</code> <code>lime</code> <code>yellow</code> <code>amber</code> <code>orange</code> <code>deep orange</code> <code>brown</code> <code>grey</code> <code>blue grey</code> <code>black</code> <code>white</code> <p>See our guide below to learn how to set custom colors.</p>"},{"location":"ctc/#accent-color","title":"Accent color","text":"<p>The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in <code>mkdocs.yml</code> by choosing a valid color name:</p> <pre><code>theme:\n  palette:\n    accent: indigo\n</code></pre> <p>Click on a tile to change the accent color:</p> <code>red</code> <code>pink</code> <code>purple</code> <code>deep purple</code> <code>indigo</code> <code>blue</code> <code>light blue</code> <code>cyan</code> <code>teal</code> <code>green</code> <code>light green</code> <code>lime</code> <code>yellow</code> <code>amber</code> <code>orange</code> <code>deep orange</code> <p>See our guide below to learn how to set custom colors.</p>"},{"location":"ctc/#color-palette-toggle","title":"Color palette toggle","text":"<p>Offering a light and dark color palette makes your documentation pleasant to read at different times of the day, so the user can choose accordingly. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  palette: # (1)!\n\n    # Palette toggle for light mode\n    - scheme: default\n      toggle:\n        icon: material/brightness-7 # (2)!\n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n</code></pre> <ol> <li> <p>Note that the <code>theme.palette</code> setting is now defined as a list.</p> </li> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>This configuration will render a color palette toggle next to the search bar. Note that you can also define separate settings for <code>primary</code> and <code>accent</code> per color palette.</p> <p>The following properties must be set for each toggle:</p> <p>:         This property must point to a valid icon path referencing any icon bundled     with the theme, or the build will not succeed. Some popular combinations:</p> <pre><code>* :material-brightness-7: + :material-brightness-4: \u2013 `material/brightness-7` + `material/brightness-4`\n* :material-toggle-switch: + :material-toggle-switch-off-outline: \u2013 `material/toggle-switch` + `material/toggle-switch-off-outline`\n* :material-weather-night: + :material-weather-sunny: \u2013 `material/weather-night` + `material/weather-sunny`\n* :material-eye: + :material-eye-outline: \u2013 `material/eye` + `material/eye-outline`\n* :material-lightbulb: + :material-lightbulb-outline: \u2013 `material/lightbulb` + `material/lightbulb-outline`\n</code></pre> <p>:         This property is used as the toggle's <code>title</code> attribute and should be set to     a discernable name to improve accessibility. It's rendered as a tooltip.</p>"},{"location":"ctc/#system-preference","title":"System preference","text":"<p>Each color palette can be linked to the user's system preference for light and dark appearance by using a media query. Simply add a <code>media</code> property next to the <code>scheme</code> definition in <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  palette:\n\n    # Palette toggle for light mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n</code></pre> <p>When the user first visits your site, the media queries are evaluated in the order of their definition. The first media query that matches selects the default color palette.</p>"},{"location":"ctc/#automatic-light-dark-mode","title":"Automatic light / dark mode","text":"<p>Newer operating systems allow to automatically switch between light and dark appearance during day and night times. Material for MkDocs adds support for automatic light / dark mode, delegating color palette selection to the user's operating system. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  palette:\n\n    # Palette toggle for automatic mode\n    - media: \"(prefers-color-scheme)\"\n      toggle:\n        icon: material/brightness-auto\n        name: Switch to light mode\n\n    # Palette toggle for light mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default # (1)!\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to system preference\n</code></pre> <ol> <li>You can also define separate settings for <code>primary</code> and     <code>accent</code> per color palette, i.e. different colors for     light and dark mode.</li> </ol> <p>Material for MkDocs will now change the color palette each time the operating system switches between light and dark appearance, even when the user doesn't reload the site.</p>"},{"location":"ctc/#customization","title":"Customization","text":""},{"location":"ctc/#custom-colors","title":"Custom colors","text":"<p>Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional style sheet and tweak the values of the CSS variables.</p> <p>First, set the <code>primary</code> or <code>accent</code> values in <code>mkdocs.yml</code> to <code>custom</code>, to signal to the theme that you want to define custom colors, e.g., when you want to override the <code>primary</code> color:</p> <pre><code>theme:\n  palette:\n    primary: custom\n</code></pre> <p>Let's say you're :fontawesome-brands-youtube:{ style=\"color: #EE0F0F\" } YouTube, and want to set the primary color to your brand's palette. Just add:</p> <p>=== \":octicons-file-code-16: <code>docs/stylesheets/extra.css</code>\"</p> <pre><code>``` css\n:root {\n  --md-primary-fg-color:        #EE0F0F;\n  --md-primary-fg-color--light: #ECB7B7;\n  --md-primary-fg-color--dark:  #90030C;\n}\n```\n</code></pre> <p>=== \":octicons-file-code-16: <code>mkdocs.yml</code>\"</p> <pre><code>``` yaml\nextra_css:\n  - stylesheets/extra.css\n```\n</code></pre> <p>See the file containing the color definitions for a list of all CSS variables.</p>"},{"location":"ctc/#custom-color-schemes","title":"Custom color schemes","text":"<p>Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in a <code>[data-md-color-scheme=\"...\"]</code> attribute selector, which you can then set via <code>mkdocs.yml</code> as described in the color schemes section:</p> <p>=== \":octicons-file-code-16: <code>docs/stylesheets/extra.css</code>\"</p> <pre><code>``` css\n[data-md-color-scheme=\"youtube\"] {\n  --md-primary-fg-color:        #EE0F0F;\n  --md-primary-fg-color--light: #ECB7B7;\n  --md-primary-fg-color--dark:  #90030C;\n}\n```\n</code></pre> <p>=== \":octicons-file-code-16: <code>mkdocs.yml</code>\"</p> <pre><code>``` yaml\ntheme:\n  palette:\n    scheme: youtube\nextra_css:\n  - stylesheets/extra.css\n```\n</code></pre> <p>Additionally, the <code>slate</code> color scheme defines all of it's colors via <code>hsla</code> color functions and deduces its colors from the <code>--md-hue</code> CSS variable. You can tune the <code>slate</code> theme with:</p> <pre><code>[data-md-color-scheme=\"slate\"] {\n  --md-hue: 210; /* (1)! */\n}\n</code></pre> <ol> <li>The <code>hue</code> value must be in the range of <code>[0, 360]</code></li> </ol>"}]}